import 'package:dio/dio.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:magh/core/contants/apis.dart';
import 'package:magh/features/shared/client_provider.dart';
import 'package:magh/features/todos/domain/todo.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';


part 'todos_repository.g.dart';


class TodosRepository{

  final Dio client;
  TodosRepository(this.client);



  Future<List<Todo>> getTodos () async{
     try{
       final response  = await client.get(todosApi);
       return (response.data as List).map((todo) => Todo.fromJson(todo)).toList();
     }catch (err){
       throw 'something went wrong';
     }
  }

  Future<void> addTodos ({required Map<String, dynamic> todoData}) async{
    try{
      await client.post(todosApi, data: todoData);
    }catch (err){
      throw 'something went wrong';
    }
  }

  Future<void> updateTodos ({required String id, required Map<String, dynamic> todoData}) async{
    try{
       await client.patch('$todosApi/$id', data: todoData);
    }catch (err){
      throw 'something went wrong';
    }
  }


  Future<void> removeTodos ({required String id}) async{
    try{
        await client.delete('$todosApi/$id');
    }catch (err){
      throw 'something went wrong';
    }
  }




}

@riverpod
TodosRepository todosRepository (Ref ref) {
  return TodosRepository(ref.watch(clientProvider));
}